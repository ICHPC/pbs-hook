#!/usr/bin/env python2

import json
import sys
import subprocess


data = json.loads(subprocess.check_output(["/opt/pbs/default/bin/pbsnodes", "-av", "-F", "json" ] ).decode("utf8"))

count={ "16":0, "24":0, "28":0 }
queue= { "short":0, "general":0, "large":0, "capability":0 }

classes= {
	"v1_throughput24" : 0,
	"v1_throughput72" : 0,
	"v1_general24"    : 0,
	"v1_general72"    : 0,
	"v1_multinode24"  : 0,
	"v1_multinode48"  : 0,
	"v1_largemem24"   : 0,
	"v1_largemem48"   : 0,
	"v1_gpu24"        : 0,
	"v1_gpu48"        : 0,
	"v1_singlenode24" : 0,
	"v1_debug"        : 0,
}

prioritising=False
for n in data["nodes"]:
	node=data["nodes"][n]
	state = node["state"]
	qlist =  node["resources_available"]["Qlist"].split(",")
	if "jobs" not in node or len(node["jobs"])==0:
		for q in qlist:
			if q not in classes:
				classes[q] = 1
			else:
				classes[q] += 1




print ("")
print ( " Nodes available for throughput  : %3d (24hr) %3d (72hr)" % (classes["v1_throughput24"], classes["v1_throughput72"] ) )
print ( " Nodes available for general     : %3d (24hr) %3d (72hr)" % (classes["v1_general24"], classes["v1_general72"] ) )
print ( " Nodes available for singlenode  : %3d (24hr)  " % (classes["v1_singlenode24"], ) )
print ( " Nodes available for multinode   : %3d (24hr) %3d (48hr)" % (classes["v1_multinode24"], classes["v1_multinode48"], ) )
print ( " Nodes available for large memory: %3d (24hr) %3d (48hr) "  % (classes["v1_largemem24"], classes["v1_largemem48"], ) )
print ( " Nodes available for GPU         : %3d (24hr) %3d (48hr)"  % (classes["v1_gpu24"], classes["v1_gpu48"], ) )
print ( " Nodes available for debug       : %3d (30min) " % (classes["v1_debug"], ) )



print ("")
print (" You may not be eligible to run additional jobs if")
print (" you have reached the per-user job concurrency limit")
print ("")
print (" See our current job sizing guidance at http://bit.ly/2AInEIj" )
print ("")

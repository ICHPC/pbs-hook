#!/usr/bin/env python

from __future__ import print_function
import json
import subprocess
import sys
import re
import datetime
import time


def log( ll ):
	fh = open("/var/tmp/queue_switch.log", "a" )
	dt = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")
	print( "%s %s" %( dt, ll), file=fh)
	fh.close()

def load_history():
	try:
		fh = open("/var/tmp/queue_switch.json", "r" )
		ret = json.load( fh )
		fh.close()
		if ret == None:
			ret=dict()
		return ret
	except:
		log("COULD NOT READ HISTORY")
		pass
	return dict()
	
def save_history( states ):
	try:
		fh = open("/var/tmp/queue_switch.json", "w" )
		json.dump( states, fh )
		fh.close()
	except:
		raise
	
	
def get_queue_states( ):
	states = load_history()

	op = subprocess.check_output( [ "/opt/pbs/default/bin/qstat", "-q" ] ).decode("utf8").split("\n")
	for i in range(5, len(op)-3 ): 
			try:
				queue   = re.split( "\s+", op[i] ) [0] 
				queued  =  int( re.split("\s+", op[i] ) [6] )
				running =  int( re.split("\s+", op[i] ) [5] )
				if (queue not in states) or running>0 or queued>0:
					states[ queue ] = { "last_active" : int(time.time() ) }
			except:
				raise
				pass
	save_history( states )
	return states
	
def switch_queues( op,  queue_mask, nodes,  threshold  = 3 ):
	threshold = threshold * 86400  # days to seconds
	now = int(time.time())
	for queue in op.keys():
		if re.match( queue_mask, queue ):
#			log("%s %d %d %d" %( queue, op[queue]["last_active"], now, threshold ) )
			if (now - op[queue]["last_active"]) < threshold:
				make_queue_dedicated( queue, nodes )
			else:
				make_queue_shared( queue, nodes )

def make_queue_dedicated( queue, nodes ):
	log("Making %s dedicated" % (queue) )
	for n in nodes.keys():
		node = nodes[n]
		qlist = node["resources_available"]["Qlist"].split(",")
		if queue in qlist: # Node is assigned to this queue
			for q in qlist: # Remove every other queue but the dedicated one from the qlist
				if q != queue:
					log("\tRemoving %s from %s" %( q, n ) )
					cmd = [ "/opt/pbs/default/bin/qmgr", "-c", "set node %s resources_available.Qlist -= %s"% ( n, q, ) ]
					subprocess.check_output( cmd )

# return a list of the v1 queues that the node "node" should be shared with		
def choose_shared_queues( queue, node ):
	if "cpumodel" in node["resources_available"]:
		cpumodel = int(re.sub( "[^1234567890]", "", str(node["resources_available"]["cpumodel"] )) )
	else:
		cpumodel = 0
	if "mem" in node["resources_available"]:
		mem = node["resources_available"]["mem"]
		mem = re.sub( "gb", "000000",  mem )
		mem = re.sub( "mb", "000", mem )
		mem = re.sub( "kb", "", mem )
		mem = int(mem)
	else:
		mem = 0


	if "icib" in node["resources_available"]:
		return ["v1_multinode24"]
	if "ngpus" in node["resources_available"] and int(node["resources_available"]["ngpus"])>0:
		return ["v1_gpu24", "v1_debug", "v1_interactive"] 
	if  mem > 130000000:
		return ["v1_largemem24", "v1_debug", "v1_interactive"] 
	if cpumodel == 24:
		return ["v1_singlenode24"]
	if cpumodel == 16:
		return["v1_general24", "v1_throughput24"]

	return ["v1_throughput24", "v1_debug", "v1_interactive"]
	
def make_queue_shared( queue, nodes ):
	log("Making %s shared" % (queue) )
	for n in nodes.keys():
		node = nodes[n]
		qlist = node["resources_available"]["Qlist"].split(",")

		if "dedicated" not in node["resources_available"] or node["resources_available"]["dedicated"] == "False":		
			if queue in qlist: # Node is assigned to this queue
				# decide which queues to add based on node resources
				shared_queues = choose_shared_queues( queue, node )
				for q in shared_queues: # Remove every other queue but the dedicated one from the qlist
					if q != queue and q not in qlist:
						log("\tAdding %s to %s" %( q, n ) )
						cmd = [ "/opt/pbs/default/bin/qmgr", "-c", "set node %s resources_available.Qlist += %s"% ( n, q, ) ]
						subprocess.check_output( cmd )
	

def get_node_states():
	data = json.loads(subprocess.check_output(["/opt/pbs/default/bin/pbsnodes", "-av", "-F", "json" ] ).decode("utf8"))
	return data["nodes"]

if __name__ == "__main__":
	log("== Switching Cycle START ==" )
	nodes = get_node_states()
	op    = get_queue_states()

	switch_queues( op, "^pq", nodes, threshold = 3 )

	sys.exit(1)


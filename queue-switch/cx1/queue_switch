#!/usr/bin/python3

import json
import subprocess
import sys
import re
import datetime
import time


def monitor_queue( queue_to_watch, backfill_qlist ):

	fh = open("/var/log/queue_switch.log", "a" )
	dt = datetime.datetime.now().strftime("%Y-%m-%d %H:%M")

	data = json.loads(subprocess.check_output(["/opt/pbs/default/bin/pbsnodes", "-a", "-F", "json" ] ).decode("utf8"))

	op = subprocess.check_output( [ "/opt/pbs/default/bin/qstat", "-q", queue_to_watch ] ).decode("utf8").split("\n")


	queued  =  int( re.split("\s+", op[5] ) [6] )
	running =  int( re.split("\s+", op[5] ) [5] )



	if queued > 0 or running > 0:
		#  Remove the backfill_qlist from the nodes
		mode = "-="
	else:
		# Queue idle, reallocate the nodes to the backfill qlist
		mode = "+="

	modified=False

	for n in data["nodes"]:
		node = data["nodes"][n]
		assigned_queues = node["resources_available"]["Qlist"].split(",")
		if queue_to_watch in assigned_queues:
			for b in backfill_qlist:
#				print( "%s %s%s" %( n, mode, b ) )
				epoch_time = int(time.time())
				too_soon = False
				if mode == "+=":
					# Check the last switch time was at least 12 ago, to avoid flipflopping
					last_switch = node["resources_available"]["last_switch"]  
					if ( epoch_time - int(last_switch) ) < (12 * 3600 ):
						too_soon = True 

				if (mode == "-=" and b in assigned_queues) or ( mode == "+=" and b not in assigned_queues ):
					if not too_soon:
						cmd = [ "/opt/pbs/default/bin/qmgr", "-c", "set node %s resources_available.Qlist %s %s"% ( n, mode, b ) ]
						subprocess.check_output( cmd )
						cmd = [ "/opt/pbs/default/bin/qmgr", "-c", "set node %s resources_available.last_switch =  %s"% ( n, epoch_time ) ]
						subprocess.check_output( cmd )
						modified = True
					else:
						print("%s\t Not switching %s to prevent flip-flopping" % ( dt, n ), file=fh )

	if modified:
		#  Remove the backfill_qlist from the nodes

		if mode == "-=" :
			print("%s\t Switching queue [%s] to exclusive mode (%s jobs queued, %s jobs running)" % ( dt, queue_to_watch, queued, running  ), file=fh )
		else:
			print("%s\t Switching queue [%s] to backfill mode" % ( dt, queue_to_watch ), file=fh )

	fh.close()

if __name__ == "__main__":
	if len(sys.argv)!=3:
		print("Syntax: %s priority_queue_list backfill_queue_list" % ( sys.argv[0] ) )
		sys.exit(1)
	queues_to_watch = sys.argv[1].split(",")
	backfill_qlist = sys.argv[2].split(",")


	for q in queues_to_watch:
		monitor_queue( q, backfill_qlist )


